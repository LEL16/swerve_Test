package frc.robot.Subsystems;

import edu.wpi.first.math.util.Units;
import edu.wpi.first.networktables.GenericEntry;
import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.networktables.NetworkTableInstance;
import edu.wpi.first.wpilibj.shuffleboard.*;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.Constants;
import java.util.Map;
import java.util.AbstractMap.SimpleEntry;

/** Represents a Limelight sensor */
public class LimelightSubsystem extends SubsystemBase {
    // NetworkTable to communicate with the Limelight device.
    private NetworkTable networkTable;

    // NetworkTableEntries to obtain various data from the Limelight device.
    private NetworkTableEntry pipelineEntry;
    private NetworkTableEntry camModeEntry;
    private NetworkTableEntry ledModeEntry;
    private NetworkTableEntry yEntry;
    private NetworkTableEntry xEntry;
    private NetworkTableEntry targetAreaEntry;
    private NetworkTableEntry foundTagEntry;

    // Shuffleboard tab specifically for the Limelight.
    private ShuffleboardTab limelightTab;

    // Variables to store the current state of the Limelight.
    private boolean isCameraModeOn = false;
    private boolean isLedOn = true;

    // Variables to store the angles generated by the tracked object.
    private double yTargetAngle;
    private double xTargetAngle;
    private double targetArea;

    // Variables for object detection.
    private double foundTag;
    private boolean foundTagBool;

    // Variables for distance calculations.
    private boolean useTrigForDistanceCalc = false;
    private double targetAreaDistance;
    private double trigDistance;
    private double distance;
    /* 
    private GenericEntry pipelineSliderEntry;
    private GenericEntry LEDsEntry;
    private GenericEntry cameraEntry;
    private GenericEntry txEntry;
    private GenericEntry tyEntry;
    private GenericEntry tvEntry;
    private GenericEntry taEntry;
    private GenericEntry areaDistanceEntry;
    private GenericEntry trigDistanceEntry;
    */
    /** The LimelightSubsystem constructor. Initializes the Limelight subsystem and sets up the NetworkTable. */
    public LimelightSubsystem() {
        limelightTab = Shuffleboard.getTab("Limelight");
        /* 
        pipelineSliderEntry = limelightTab.add("Pipeline", 0).withWidget(BuiltInWidgets.kNumberSlider).withProperties(Map.of("min", 0, "max", 4)).withSize(2, 1).withPosition(0, 0).getEntry();
        LEDsEntry = limelightTab.add("LEDs", false).withWidget(BuiltInWidgets.kToggleSwitch).withPosition(0,1).withSize(2,1).getEntry();
        cameraEntry = limelightTab.add("Camera", false).withWidget(BuiltInWidgets.kToggleSwitch).withPosition(0,2).withSize(2,1).getEntry();
        txEntry = limelightTab.add("tx",-1).withSize(1, 1).withPosition(2, 0).getEntry();
        tyEntry = limelightTab.add("ty",-1).withSize(1, 1).withPosition(2, 1).getEntry();
        tvEntry = limelightTab.add("tv",false).withSize(1, 1).withPosition(2, 4).getEntry();
        taEntry = limelightTab.add("ta",-1).withSize(1, 1).withPosition(2, 3).getEntry();
        areaDistanceEntry = limelightTab.add("area distance",-1).withSize(1, 1).withPosition(3, 0).getEntry();
        trigDistanceEntry = limelightTab.add("trig distance",-1).withSize(1, 1).withPosition(3, 1).getEntry();
        */
    }   

    @Override
    public void periodic() {
        networkTable = NetworkTableInstance.getDefault().getTable("limelight");  

        // NetworkTableEntries to store the values generated by the Limelight.
        pipelineEntry = networkTable.getEntry("pipeline");
        camModeEntry = networkTable.getEntry("camMode");
        ledModeEntry = networkTable.getEntry("ledMode");
        yEntry = networkTable.getEntry("ty");
        targetAreaEntry = networkTable.getEntry("ta");
        xEntry = networkTable.getEntry("tx");
        foundTagEntry = networkTable.getEntry("tv");
        //Updating Generic Entries
        /* 
        txEntry.setDouble(xEntry.getDouble(0));
        tyEntry.setBoolean(foundTagBool);
        tvEntry.setDouble(tvEntry.getDouble(0));
        taEntry.setDouble(targetAreaEntry.getDouble(0));
        areaDistanceEntry.setDouble(targetAreaDistance);
        trigDistanceEntry.setDouble(trigDistance);
        */
        // Using the entries to generate data and/or change current Limelight
        // specifications.
        pipelineEntry.setNumber(0);
        // (int)pipelineSliderEntry.getDouble(0)
        if (isCameraModeOn == true) {
            camModeEntry.setNumber(1);
        } else {
            camModeEntry.setNumber(0);
        }
        if (isLedOn == true) {
            ledModeEntry.setNumber(3);
        } else {
            ledModeEntry.setNumber(1);
        }
        yTargetAngle = yEntry.getDouble(0.0);
        xTargetAngle = xEntry.getDouble(0.0);
        targetArea = targetAreaEntry.getDouble(0.0);
        foundTag = foundTagEntry.getDouble(0.0);
        foundTagBool = (foundTag != 0) ? true : false;

        // Using data points and trigonometry for distance calculations from the
        // Limelight to the object detected.
        targetAreaDistance = Units.inchesToMeters(54.4 * Math.pow(targetArea, -0.475));
        trigDistance = Units.inchesToMeters(((Constants.LIMELIGHT_GOAL_HEIGHT - Constants.LIMELIGHT_LENS_HEIGHT) * 100) / Math.tan(Math.toRadians(xTargetAngle) + Constants.LIMELIGHT_ANGLE));
        distance = (useTrigForDistanceCalc) ? trigDistance : targetAreaDistance;
    }

    public double getYTargetAngle() {
        return yTargetAngle;
    }

    public double getXTargetAngle() {
        return xTargetAngle;
    }

    public double getTargetAreaDistance() {
        return targetAreaDistance;
    }

    public double getTrigDistance() {
        return trigDistance;
    }

    public double getDistance() {
        return distance;
    }

    public boolean getFoundTag() {
        return foundTagBool;
    }

    public boolean getLEDStatus() {
        return isLedOn;
    }

    public boolean getCameraModeStatus() {
        return isCameraModeOn;
    }

    public void setLEDStatus(boolean isLedOn) {
        this.isLedOn = isLedOn;
    }

    public void setCameraStatus(boolean isCameraModeOn) {
        this.isCameraModeOn = isCameraModeOn;
    }
}